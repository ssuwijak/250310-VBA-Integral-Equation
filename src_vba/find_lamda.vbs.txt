' Given parameters
Const T As Double = 10.04
Const g As Double = 9.81
Const d As Double = 481.18
Const Uc0 As Double = 1.33

Const PI As Double = 3.14159 'WorksheetFunction.PI()
Const PI2 As Double = PI * 2
Const PI4 As Double = PI * 4

Function CalEquation(lambda As Double) As Double
    Dim integral_val As Double
    integral_val = SumByNumericalMethod(0, d, 1000, lambda) / (d ^ (1 / 7))
    
    Dim term1 As Double, term2 As Double, term3 As Double
    term1 = lambda / T
    term2 = lambda / Sqr(PI2 * lambda / (g * WorksheetFunction.Tanh(PI2 * d / lambda)))
    term3 = ((PI4 / lambda) / WorksheetFunction.Sinh(PI4 * d / lambda)) * Uc0 * integral_val
    
    CalEquation = term1 - term2 - term3
End Function

Sub Test_SumByNumericalMethod()
    ' https://www.youtube.com/watch?v=7EqRRuh-5Lk
    Dim y As Double
    y = SumByNumericalMethod(2, 10, 4, 0) ' Fx = x ^ 3 ; integrate from 2 to 10 and no lambda
    MsgBox "the answer is " & y, vbInformation
End Sub

Function Fx(u As Double, lambda As Double) As Double
    Fx = (u ^ (1 / 7)) * WorksheetFunction.Cosh(PI4 * u / lambda)
    'Fx = u ^ 3 ' for testing
End Function

Function SumByNumericalMethod(a As Double, b As Double, n As Integer, lambda As Double) As Double
    ' Numerical integration (Simpson's rule)
    ' https://www.youtube.com/watch?v=7EqRRuh-5Lk
    
    Dim i As Integer
    Dim dx As Double, x As Double, sum As Double
    
    If a = b Then
        SumByNumericalMethod = 0
        Exit Function
    End If
    
    If a > b Then
        x = a
        a = b
        b = a
    End If

    ' Number of intervals (adjust as needed for accuracy)
    If n < 2 Or n > 2000 Then n = 100

    dx = (b - a) / n
    
    sum = Fx(a, lambda) + Fx(b, lambda)

    For i = 1 To n - 1
        x = a + dx * i
        
        If i Mod 2 = 0 Then
            ' even term
            sum = sum + 2 * Fx(x, lambda)
        Else
            ' odd term
            sum = sum + 4 * Fx(x, lambda)
        End If
    Next
    
    sum = sum * dx / 3
    
    SumByNumericalMethod = sum
End Function

Sub FindLambda()
    ' Example usage (find root using a simple bisection method)
    Dim lambda_lower As Double, lambda_upper As Double, lambda_mid As Double
    Dim f_lower As Double, f_upper As Double, f_mid As Double
    
    ' Set initial bounds for lambda (adjust as needed)
    lambda_lower = 100
    lambda_upper = 500
    
    ' Evaluate function at bounds
    f_lower = CalEquation(lambda_lower)
    f_upper = CalEquation(lambda_upper)
    
    ' Check if root exists within bounds
    If f_lower * f_upper > 0 Then
        MsgBox "No root found within the specified bounds. Adjust lambda_lower and lambda_upper."
        Exit Sub
    End If
    
    ' Bisection method
    Dim tolerance As Double, iteration_limit As Integer, i As Integer
    tolerance = 0.001 ' Adjust as needed
    iteration_limit = 1000
    i = 0
    
    Do While (lambda_upper - lambda_lower) > tolerance And i < iteration_limit
        lambda_mid = (lambda_lower + lambda_upper) / 2
        f_mid = CalEquation(lambda_mid)
        
        If f_lower * f_mid < 0 Then
            lambda_upper = lambda_mid
            f_upper = f_mid
        Else
            lambda_lower = lambda_mid
            f_lower = f_mid
        End If
        
        i = i + 1
    Loop
    
    ' Display result
    If i < iteration_limit Then
        MsgBox "Lambda = " & lambda_mid, vbInformation
    Else
        MsgBox "Lambda was divergent and iteration = " & i, vbCritical
    End If
End Sub

Sub plot_Lambda_vs_Equation(a As Double, b As Double)
    Dim dx As Double, x As Double, y As Double, step_x As Integer
    If a > b Then
        x = a
        a = b
        b = x
    End If
    
    step_x = 1000
    dx = (b - a) / step_x
    
    x = a
    Do While x <= b
        y = CalEquation(x)
        'print x and y
        x = x + dx
    Loop
    
    MsgBox "done", vbInformation
End Sub
